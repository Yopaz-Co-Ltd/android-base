// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        lib_versions = [
                build_gradle        : "7.3.1",
                core_ktx            : '1.9.0',
                appcompat           : '1.5.1',
                material            : '1.7.0',
                constraintlayout    : '2.1.4',
                junit               : '4.13.2',
                junit_ext           : '1.1.4',
                espresso            : '3.5.0',
                multidex            : '2.0.1',
                koin                : '3.2.0',
                koin_android_ext    : '3.0.2',
                lifecycle           : '2.5.1',
                chucker             : '3.5.2',
                okhttp3             : '4.9.3',
                logging_okhttp3     : '4.9.3',
                retrofit            : '2.9.0',
                moshi_retrofit      : '2.9.0',
                rxjava              : '2.2.21',
                rxkotlin            : '2.4.0',
                rxandroid           : '2.1.1',
                moshi               : '1.13.0',
                room                : '2.4.3',
                room_coroutines     : '2.1.0-alpha04',
                room_compiler       : '2.2.5',
                loading             : '1.4.0',
                glide               : '4.14.2',
                browser             : '1.4.0',
                swipe_refresh_layout: '1.1.0',
                jdbc                : '3.34.0',
                coroutines          : '1.5.0',
                security_crypto     : '1.1.0-alpha04',
                navigation_component: '2.5.3'
        ]
    }
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$lib_versions.build_gradle"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$lib_versions.navigation_component"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    configurations.all {
        resolutionStrategy {
            force "org.xerial:sqlite-jdbc:$lib_versions.jdbc"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task convertDimens() {
    def xmlFileRoot = "${project.rootDir}/app/src/main/res/values/dimens.xml"

    def xmlFile240 = "${project.rootDir}/app/src/main/res/values-sw240dp/dimens.xml"
    def xmlFile360 = "${project.rootDir}/app/src/main/res/values-sw360dp/dimens.xml"
    def xmlFile480 = "${project.rootDir}/app/src/main/res/values-sw480dp/dimens.xml"
    def xmlFile540 = "${project.rootDir}/app/src/main/res/values-sw540dp/dimens.xml"

    def xmlOriginal = new XmlParser().parse(xmlFileRoot)

    def xml240 = xmlOriginal.clone()
    def xml360 = xmlOriginal.clone()
    def xml480 = xmlOriginal.clone()
    def xml540 = xmlOriginal.clone()

    xml240.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((240 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((240 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((240 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }

    xml360.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((360 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((360 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((360 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }

    xml480.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((480 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((480 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((480 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }

    xml540.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((540 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((540 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((540 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }

    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile240))).print(xml240)
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile360))).print(xml360)
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile480))).print(xml480)
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile540))).print(xml540)
}

static float round(float d, int decimalPlace) {
    BigDecimal bd = new BigDecimal(Float.toString(d))
    bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP)
    return bd.floatValue()
}

clean.dependsOn convertDimens
